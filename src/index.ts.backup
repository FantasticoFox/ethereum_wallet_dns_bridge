#!/usr/bin/env node

import { program } from 'commander';
import { generateProof, formatTxtRecord, createMessageToSign } from './proof';
import { verifyProof } from './verify';
import { ethers } from 'ethers';
import { randomBytes } from 'crypto';
import inquirer from 'inquirer';
import * as fs from 'fs';
import * as path from 'path';
import * as dotenv from 'dotenv';

dotenv.config();

// Wallet service functions
async function getWalletFromMnemonic(mnemonic: string, derivationPath: string = "m/44'/60'/0'/0/0"): Promise<ethers.Wallet> {
  try {
    return ethers.Wallet.fromMnemonic(mnemonic, derivationPath);
  } catch (error) {
    throw new Error(`Invalid mnemonic: ${error instanceof Error ? error.message : error}`);
  }
}

async function promptForSignatureMethod(): Promise<{ method: string; wallet?: ethers.Wallet; address?: string }> {
  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'method',
      message: 'How would you like to sign the proof?',
      choices: [
        { name: 'Enter mnemonic phrase (secure)', value: 'mnemonic' },
        { name: 'Load from credentials file', value: 'file' },
        { name: 'Use environment variable (WALLET_MNEMONIC)', value: 'env' }
      ]
    }
  ]);

  switch (answers.method) {
    case 'mnemonic':
      const mnemonicAnswer = await inquirer.prompt([
        {
          type: 'password',
          name: 'mnemonic',
          message: 'Enter your 12 or 24 word mnemonic phrase:',
          mask: '*',
          validate: (input: string) => {
            const words = input.trim().split(/\s+/);
            return (words.length === 12 || words.length === 24) || 'Please enter exactly 12 or 24 words';
          }
        }
      ]);
      const wallet = await getWalletFromMnemonic(mnemonicAnswer.mnemonic);
      return { method: 'mnemonic', wallet };

    case 'file':
      const fileAnswer = await inquirer.prompt([
        {
          type: 'input',
          name: 'filePath',
          message: 'Enter path to credentials file:',
          validate: (input: string) => fs.existsSync(input) || 'File does not exist'
        }
      ]);
      try {
        const fileData = JSON.parse(fs.readFileSync(fileAnswer.filePath, 'utf-8'));
        if (!fileData.mnemonic) {
          throw new Error('Credentials file must contain a "mnemonic" field');
        }
        const fileWallet = await getWalletFromMnemonic(fileData.mnemonic, fileData.derivationPath);
        return { method: 'file', wallet: fileWallet };
      } catch (error) {
        throw new Error(`Failed to load credentials: ${error instanceof Error ? error.message : error}`);
      }

    case 'env':
      const envMnemonic = process.env.WALLET_MNEMONIC;
      if (!envMnemonic) {
        throw new Error('WALLET_MNEMONIC environment variable not set');
      }
      const envWallet = await getWalletFromMnemonic(envMnemonic);
      return { method: 'env', wallet: envWallet };

    default:
      throw new Error('Invalid method selected');
  }
}

program
  .name('wallet-tool')
  .description('Wallet-to-Domain Lookup System CLI')
  .version('1.0.0');

program
  .command('generate')
  .description('Generate a proof for wallet-to-domain association')
  .argument('<domain>', 'Domain name (e.g., example.com)')
  .option('--mnemonic <mnemonic>', 'Mnemonic phrase (12 or 24 words)')
  .option('--file <path>', 'Path to credentials file')
  .option('--env', 'Use WALLET_MNEMONIC environment variable')
  .action(async (domain, options) => {
    try {
      console.log('üîê Secure Wallet-to-Domain Proof Generation');
      console.log('‚ö†Ô∏è  This tool never stores your private keys or mnemonic phrases\n');
      
      let wallet: ethers.Wallet;
      
      // Determine signature method
      if (options.mnemonic) {
        wallet = await getWalletFromMnemonic(options.mnemonic);
        console.log('‚úÖ Using provided mnemonic');
      } else if (options.file) {
        if (!fs.existsSync(options.file)) {
          throw new Error(`Credentials file not found: ${options.file}`);
        }
        const fileData = JSON.parse(fs.readFileSync(options.file, 'utf-8'));
        if (!fileData.mnemonic) {
          throw new Error('Credentials file must contain a "mnemonic" field');
        }
        wallet = await getWalletFromMnemonic(fileData.mnemonic, fileData.derivationPath);
        console.log('‚úÖ Using credentials file');
      } else if (options.env) {
        const envMnemonic = process.env.WALLET_MNEMONIC;
        if (!envMnemonic) {
          throw new Error('WALLET_MNEMONIC environment variable not set');
        }
        wallet = await getWalletFromMnemonic(envMnemonic);
        console.log('‚úÖ Using environment variable');
      } else {
        // Interactive mode
        const { wallet: interactiveWallet } = await promptForSignatureMethod();
        wallet = interactiveWallet!;
      }

      console.log(`\nüîç Wallet Address: ${wallet.address}`);
      console.log('üìù Generating cryptographic proof...');
      
      // Generate timestamp and nonce
      const timestamp = Math.floor(Date.now() / 1000).toString();
      const nonce = randomBytes(5).toString('hex');
      
      // Create message to sign
      const message = createMessageToSign(domain, timestamp, nonce);
      const hash = ethers.utils.sha256(ethers.utils.toUtf8Bytes(message));
      
      // Sign the message
      const signature = await wallet.signMessage(hash);
      
      // Create proof
      const proof = await generateProof(domain, wallet.address, signature);
      const txtRecord = formatTxtRecord(proof);
      
      console.log('\n‚úÖ Proof generated successfully!');
      console.log('\nüìã TXT Record Content:');
      console.log(`${txtRecord}`);
      console.log('\nüìç DNS Configuration:');
      console.log(`Add the above content as a TXT record at: aqua._<lookup-key>.${domain}`);
      console.log(`Example: aqua._wallet1.${domain}`);
      console.log('\nüí° Instructions:');
      console.log('1. Copy the TXT record content above');
      console.log('2. Log into your DNS provider');
      console.log('3. Create a new TXT record with the specified name');
      console.log('4. Paste the content as the value');
      console.log('5. Save the DNS record');
      console.log('6. Wait for DNS propagation (up to 24 hours)');
      console.log('7. Use the verify command to check the association');
      
    } catch (error) {
      console.error('‚ùå Error generating proof:', error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

program
  .command('verify')
  .description('Verify a wallet-to-domain association')
  .argument('<domain>', 'Domain name (e.g., example.com)')
  .argument('<lookupKey>', 'Lookup key (e.g., wallet1)')
  .action(async (domain, lookupKey) => {
    try {
      console.log(`Verifying association for ${domain} with lookup key "${lookupKey}"...`);
      console.log(`Querying DNS record: aqua._${lookupKey}.${domain}`);
      
      const isValid = await verifyProof(domain, lookupKey);
      
      if (isValid) {
        console.log('‚úÖ Valid wallet-to-domain association found!');
        console.log('The cryptographic signature matches the wallet address.');
      } else {
        console.log('‚ùå Invalid or no association found.');
        console.log('Possible reasons:');
        console.log('- DNS record does not exist');
        console.log('- DNS record format is incorrect');
        console.log('- Cryptographic signature is invalid');
        console.log('- DNS propagation is still in progress');
      }
      
    } catch (error) {
      console.error('‚ùå Error verifying proof:', error instanceof Error ? error.message : error);
      process.exit(1);
    }
  });

program.parse(); 