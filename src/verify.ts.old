const { ethers } = require('ethers');
import * as dns from 'dns';
import { promisify } from 'util';
import { TxtRecord } from './types';

const resolveTxt = promisify(dns.resolveTxt);

export async function verifyProof(domain: string, lookupKey: string): Promise<boolean> {
  const recordName = `aqua._${lookupKey}.${domain}`;
  let testsPassed = 0;
  let totalTests = 0;
  
  console.log('\nüîç Starting verification tests...\n');
  
  // Test 1: DNS Record Existence
  totalTests++;
  console.log(`Test 1/7: DNS Record Existence`);
  console.log(`   Querying: ${recordName}`);
  
  try {
    const txtRecords = await resolveTxt(recordName);
    if (!txtRecords || txtRecords.length === 0) {
      console.log('   ‚ùå FAIL: No TXT records found at this location');
      console.log(`   ‚ÑπÔ∏è  Expected: TXT record at ${recordName}`);
      console.log(`   ‚ÑπÔ∏è  Found: No records`);
      return false;
    }
    
    console.log(`   ‚úÖ PASS: Found ${txtRecords.length} TXT record(s)`);
    testsPassed++;
    
    // Test 2: Wallet Record Format
    totalTests++;
    console.log(`\nTest 2/7: Wallet Record Format`);
    
    const txtRecord = txtRecords.flat().find(record => 
      record.includes('wallet=') && record.includes('timestamp=') && record.includes('sig=')
    );
    
    if (!txtRecord) {
      console.log('   ‚ùå FAIL: No wallet record with required format found');
      console.log('   ‚ÑπÔ∏è  Expected: wallet=...&timestamp=...&sig=...');
      console.log('   ‚ÑπÔ∏è  Found:', txtRecords.flat());
      return false;
    }

    console.log('   ‚úÖ PASS: Valid wallet record format found');
    console.log(`   üìã Record: ${txtRecord}`);
    testsPassed++;

    // Test 3: Field Parsing
    totalTests++;
    console.log(`\nTest 3/7: Field Parsing`);
    
    const parsedRecord = parseTxtRecord(txtRecord);
    if (!parsedRecord.wallet || !parsedRecord.timestamp || !parsedRecord.sig) {
      console.log('   ‚ùå FAIL: Missing required fields after parsing');
      console.log('   ‚ÑπÔ∏è  Required: wallet, timestamp, sig');
      console.log('   ‚ÑπÔ∏è  Parsed:', parsedRecord);
      return false;
    }

    console.log('   ‚úÖ PASS: All required fields parsed successfully');
    console.log(`   ‚ÑπÔ∏è  Wallet: ${parsedRecord.wallet}`);
    console.log(`   ‚ÑπÔ∏è  Timestamp: ${parsedRecord.timestamp}`);
    console.log(`   ‚ÑπÔ∏è  Signature: ${parsedRecord.sig.substring(0, 20)}...`);
    testsPassed++;

    // Test 4: Domain Consistency & EIP-191 Message Reconstruction
    totalTests++;
    console.log(`\nTest 4/7: Domain Consistency & EIP-191 Message Reconstruction`);
    
    // Reconstruct the original message (before EIP-191 formatting)
    const originalMessage = `${parsedRecord.timestamp}|${domain}`;
    console.log(`   üìù Original message: "${originalMessage}"`);
    console.log(`   ‚ÑπÔ∏è  Message format: timestamp|domain`);
    console.log(`   ‚ÑπÔ∏è  EIP-191 Note: ethers.js handles automatic EIP-191 formatting`);
    console.log('   ‚úÖ PASS: Domain consistency and message reconstruction verified');
    testsPassed++;

    // Test 5: Timestamp Validity
    totalTests++;
    console.log(`\nTest 5/7: Timestamp Validity`);
    
    const timestamp = parseInt(parsedRecord.timestamp);
    const timestampDate = new Date(timestamp * 1000);
    const now = new Date();
    const ageMs = now.getTime() - timestampDate.getTime();
    const ageDays = Math.floor(ageMs / (1000 * 60 * 60 * 24));
    
    if (isNaN(timestamp) || timestamp <= 0) {
      console.log('   ‚ùå FAIL: Invalid timestamp format');
      console.log(`   ‚ÑπÔ∏è  Expected: Valid Unix timestamp`);
      console.log(`   ‚ÑπÔ∏è  Found: ${parsedRecord.timestamp}`);
      return false;
    }
    
    console.log('   ‚úÖ PASS: Valid timestamp format');
    console.log(`   ‚ÑπÔ∏è  Signature created: ${timestampDate.toISOString()}`);
    console.log(`   ‚ÑπÔ∏è  Age: ${ageDays} days`);
    testsPassed++;
    
    // Test 6: Cryptographic Signature Verification (EIP-191 Compliant)
    totalTests++;
    console.log(`\nTest 6/7: Cryptographic Signature Verification (EIP-191 Compliant)`);
    console.log(`   üîê Verifying EIP-191 signature for: "${originalMessage}"`);
    
    try {
      // ethers.utils.verifyMessage handles EIP-191 formatting automatically:
      // It applies: "\x19Ethereum Signed Message:\n" + len(message) + message
      // This matches MetaMask's personal_sign behavior (EIP-191 version 0x45)
      const recoveredAddress = ethers.utils.verifyMessage(originalMessage, parsedRecord.sig);
      
      console.log(`   ‚ÑπÔ∏è  Expected wallet: ${parsedRecord.wallet}`);
      console.log(`   ‚ÑπÔ∏è  Recovered address: ${recoveredAddress}`);
      
      if (recoveredAddress.toLowerCase() === parsedRecord.wallet.toLowerCase()) {
        console.log('   ‚úÖ PASS: Signature verification successful');
        console.log('   üîê The signature was created by the claimed wallet address');
        testsPassed++;
        
        // Test 7: Domain Consistency Check (after signature verification)
        totalTests++;
        console.log(`\nTest 7/7: Domain Consistency Check`);
        console.log(`   üîç Verifying the signed domain matches the queried domain`);
        
        // Extract the domain from the verified message
        const signedDomain = originalMessage.split('|')[1];
        console.log(`   ‚ÑπÔ∏è  Domain being queried: ${domain}`);
        console.log(`   ‚ÑπÔ∏è  Domain in signed message: ${signedDomain}`);
        console.log(`   ‚ÑπÔ∏è  DNS record location: ${recordName}`);
        
        if (signedDomain !== domain) {
          console.log('   ‚ùå FAIL: Domain mismatch!');
          console.log('   üö® The signature is valid but was created for a different domain');
          console.log(`   ‚ÑπÔ∏è  This could indicate the DNS record was copied from another domain`);
          return false;
        }
        
        console.log('   ‚úÖ PASS: Domain consistency verified');
        console.log('   üîê The signature was specifically created for this domain');
        testsPassed++;
        
        // Final Summary
        console.log(`\nüéâ VERIFICATION COMPLETE: ${testsPassed}/${totalTests} tests passed`);
        console.log('‚úÖ All verification tests passed successfully!');
        console.log(`‚úÖ Wallet ${parsedRecord.wallet} is cryptographically linked to domain ${domain}`);
        
        return true;
      } else {
        console.log('   ‚ùå FAIL: Signature verification failed');
        console.log('   üö® The signature was NOT created by the claimed wallet address');
        console.log(`   ‚ÑπÔ∏è  Address mismatch: expected ${parsedRecord.wallet}, got ${recoveredAddress}`);
      }
    } catch (error) {
      console.log('   ‚ùå FAIL: Signature verification error');
      console.log(`   ‚ÑπÔ∏è  Error: ${error instanceof Error ? error.message : error}`);
    }
    
  } catch (error) {
    console.log('   ‚ùå FAIL: DNS lookup error');
    console.log(`   ‚ÑπÔ∏è  Error: ${error instanceof Error ? error.message : error}`);
  }
  
  // Failed Summary
  console.log(`\n‚ùå VERIFICATION FAILED: ${testsPassed}/${totalTests} tests passed`);
  return false;
}

function parseTxtRecord(txt: string): TxtRecord {
  // Use standard URLSearchParams for robust URL parameter parsing
  const params = new URLSearchParams(txt);
  
  return { 
    wallet: params.get('wallet') || '', 
    timestamp: params.get('timestamp') || '', 
    sig: params.get('sig') || '' 
  };
} 