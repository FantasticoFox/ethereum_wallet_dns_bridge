# Wallet-to-Domain Lookup System Architecture Document

## Executive Summary
The Wallet-to-Domain Lookup System is a local TypeScript CLI tool that associates cryptocurrency wallet addresses with domain names. Users generate a cryptographic proof (timestamp, nonce, domain, SHA-256 hash, EIP-191 signature) and manually update their DNS TXT record with the proof, prefixed as `aqua._<lookup key>.<domain>`. The tool verifies associations by querying DNS records and validating signatures. Designed for users with DNS admin rights, it operates locally, ensuring simplicity, security, and portability without external dependencies.

**Objectives**:
- Generate secure wallet-to-domain proofs for DNS TXT records.
- Verify associations via DNS queries.
- Provide a user-friendly CLI for proof generation and verification.
- Ensure cross-platform compatibility (Windows, macOS, Linux).

## Glossary
- **Wallet Address**: A cryptographic public key (e.g., 42-char address).
- **Domain Name**: A human-readable identifier (e.g., example.com).
- **Nonce**: A 10-char random hexadecimal string to prevent replay attacks.
- **EIP-191**: Ethereum signature standard (used off-chain).
- **SHA-256**: Cryptographic hash function.
- **DNS TXT Record**: Stores proof as `aqua._<lookup key>.<domain>`.

## System Overview
### Purpose
The system enables users to associate a wallet address with a domain using a local CLI tool. Users generate a proof, copy it to their DNS TXT record, and verify associations by querying DNS. The process is local, except for manual DNS updates by users with admin rights.

### Scope
- **In-Scope**: Local tool for proof generation and verification, DNS TXT record formatting.
- **Out-of-Scope**: DNS management, domain registration, wallet key management.

## Requirements
### Functional
1. **Proof Generation**:
   - Input: Domain name, wallet private key.
   - Output: DNS TXT record content (`wallet=<address>;nonce=<nonce>;sig=<signature>`).
2. **DNS Update**:
   - User manually updates TXT record at `aqua._<lookup key>.<domain>`.
3. **Verification**:
   - Input: Domain name, lookup key.
   - Output: Validation result (valid/invalid) by querying DNS.
4. **Revocation**:
   - Generate new proof to update or nullify association.

### Non-Functional
- **Performance**: Proof generation <1s, verification <500ms (excluding DNS).
- **Security**: Prevent tampering/replay attacks via signatures and nonces.
- **Usability**: Simple CLI with clear instructions.
- **Portability**: Cross-platform with minimal dependencies.

## Architecture
### High-Level Design
A standalone CLI tool written in TypeScript runs locally, handling proof generation and verification. It interacts with the user’s DNS provider only for verification queries. Users manually update DNS TXT records.

**Justification**:
- Local execution eliminates external dependencies.
- TypeScript ensures type safety and modern JavaScript ecosystem.

### Diagram (Text)
- **CLI Tool**:
  - **Proof Generator**: Creates timestamp, nonce, hash, signature.
  - **Verifier**: Queries DNS for `aqua._<lookup key>.<domain>`, validates signature.
  - **CLI Interface**: Handles user input/output.
- **DNS Provider** (external): Stores TXT record.
- **Flow**:
  1. User runs `generate` command with domain and private key.
  2. Tool outputs TXT record content.
  3. User updates DNS TXT record.
  4. User runs `verify` command to check DNS and validate.

### Components
1. **Proof Generator**:
   - Generates 10-char timestamp, 10-char nonce, SHA-256 hash of `timestamp + nonce + domain`, EIP-191 signature.
   - Outputs TXT record string.
2. **Verifier**:
   - Queries DNS for `aqua._<lookup key>.<domain>`.
   - Validates signature against hash.
3. **CLI Interface**:
   - Commands: `generate`, `verify`.
   - Displays results and instructions.

### Technology Stack
- **Language**: TypeScript (type-safe, Node.js ecosystem).
- **Libraries**:
  - **ethers**: EIP-191 signatures and SHA-256 hashing.
  - **dns-packet**: DNS TXT record queries.
  - **commander**: CLI parsing.
- **Build Tool**: esbuild (bundles to single executable).
- **Runtime**: Node.js (v18+).
- **Documentation**: Markdown guide.

**Justification**:
- TypeScript: Robust for CLI tools, supports ethers.
- ethers: Simplifies cryptographic operations.
- dns-packet: Lightweight DNS queries.
- esbuild: Fast, portable executables.

## Data Architecture
### Data Model
- **Proof** (ephemeral):
  - `walletAddress`: String (42 chars).
  - `domainName`: String (e.g., example.com).
  - `nonce`: String (10-char hex).
  - `timestamp`: String (10-char Unix timestamp).
  - `signature`: String (EIP-191).
- **DNS TXT Record**:
  - Format: `wallet=<walletAddress>;nonce=<nonce>;sig=<signature>`.
  - Stored at: `aqua._<lookup key>.<domain>`.

### Data Flow
1. **Generation**:
   - User inputs domain, private key.
   - Tool generates proof, outputs TXT record content.
2. **DNS Update**:
   - User copies content to DNS provider.
3. **Verification**:
   - Tool queries `aqua._<lookup key>.<domain>`.
   - Validates signature against hash.
4. **Revocation**:
   - New proof overwrites or nullifies TXT record.

### Security
- Nonce prevents replay attacks.
- EIP-191 signatures ensure integrity.
- Private key input is masked, not stored.
- No local storage; no compliance issues.

## Non-Functional Considerations
### Performance
- Proof generation: <1s (optimized hashing/signing).
- Verification: <500ms (DNS query dependent).
- Lightweight: Minimal CPU/memory usage.

### Security
- Input validation prevents injection.
- Nonce and timestamp ensure proof uniqueness.
- OWASP practices: Sanitized inputs, secure coding.

### Usability
- CLI with clear help text.
- Markdown guide for DNS updates.

### Portability
- Node.js ensures cross-platform support.
- esbuild creates standalone executable.

## Deployment
- **Distribution**: GitHub release with prebuilt binaries.
- **Installation**: Run `npm install` or use executable.
- **Updates**: Manual download of new versions.

## Operations
- **Logging**: Console and file (`wallet-tool.log`) for errors.
- **Feedback**: Clear CLI messages (e.g., “Invalid DNS record”).
- **Recovery**: Reinstall tool if corrupted; DNS is user-managed.

## Risks and Mitigations
| **Risk** | **Mitigation** |
|----------|----------------|
| DNS update errors | Clear guide, validation in tool. |
| Propagation delays | Document delays, retry queries. |
| Key exposure | Mask input, user warnings. |
| Compatibility | Test on multiple OS, use esbuild. |

## Step-by-Step Implementation Strategy
### Specifications
- **Input** (Generate): Domain name (e.g., `example.com`), wallet private key (e.g., `0x...`).
- **Output** (Generate): TXT record content (`wallet=<address>;nonce=<nonce>;sig=<signature>`).
- **Input** (Verify): Domain name, lookup key (e.g., `wallet1`).
- **Output** (Verify): “Valid” or error message.
- **DNS Record**: Stored at `aqua._<lookup key>.<domain>` (e.g., `aqua._wallet1.example.com`).
- **Constraints**: Local, TypeScript, no external services.

### Steps
1. **Setup Project**:
   - Initialize TypeScript project: `npm init`, `tsc --init`.
   - Install dependencies: `npm i ethers dns-packet commander`.
   - Install esbuild: `npm i esbuild`.
   - Create folder structure:
     ```
     src/
       index.ts       # CLI entry
       proof.ts       # Proof generation
       verify.ts      # Verification
       types.ts       # Interfaces
     docs/
       guide.md       # User guide
     ```

2. **Define Data Model**:
   - In `types.ts`:
     ```typescript
     interface Proof {
       walletAddress: string;
       domainName: string;
       nonce: string;
       timestamp: string;
       signature: string;
     }
     interface TxtRecord {
       wallet: string;
       nonce: string;
       sig: string;
     }
     ```

3. **Implement Proof Generation**:
   - In `proof.ts`:
     ```typescript
     import { ethers } from 'ethers';
     import { randomBytes } from 'crypto';

     export async function generateProof(domain: string, privateKey: string): Promise<Proof> {
       const timestamp = Math.floor(Date.now() / 1000).toString();
       const nonce = randomBytes(5).toString('hex'); // 10 chars
       const message = timestamp + nonce + domain;
       const hash = ethers.utils.sha256(ethers.utils.toUtf8Bytes(message));
       const wallet = new ethers.Wallet(privateKey);
       const signature = await wallet.signMessage(ethers.utils.arrayify(hash));
       return {
         walletAddress: wallet.address,
         domainName: domain,
         nonce,
         timestamp,
         signature
       };
     }

     export function formatTxtRecord(proof: Proof): string {
       return `wallet=${proof.walletAddress};nonce=${proof.nonce};sig=${proof.signature}`;
     }
     ```
   - Generates timestamp, nonce, SHA-256 hash, EIP-191 signature.
   - Outputs TXT record string.

4. **Implement Verification**:
   - In `verify.ts`:
     ```typescript
     import { ethers } from 'ethers';
     import * as dns from 'dns-packet';

     export async function verifyProof(domain: string, lookupKey: string): Promise<boolean> {
       const recordName = `aqua._${lookupKey}.${domain}`;
       try {
         const response = await dns.query(recordName, 'TXT');
         const txt = response.answers?.[0]?.data?.toString();
         if (!txt) return false;

         const record = parseTxtRecord(txt);
         const message = record.timestamp + record.nonce + domain;
         const hash = ethers.utils.sha256(ethers.utils.toUtf8Bytes(message));
         const recoveredAddress = ethers.utils.verifyMessage(
           ethers.utils.arrayify(hash),
           record.sig
         );
         return recoveredAddress.toLowerCase() === record.wallet.toLowerCase();
       } catch {
         return false;
       }
     }

     function parseTxtRecord(txt: string): TxtRecord {
       const parts = txt.split(';').reduce((acc, part) => {
         const [key, value] = part.split('=');
         acc[key] = value;
         return acc;
       }, {} as Record<string, string>);
       return { wallet: parts.wallet, nonce: parts.nonce, sig: parts.sig };
     }
     ```
   - Queries DNS for `aqua._<lookup key>.<domain>`.
   - Validates signature against hash.

5. **Build CLI Interface**:
   - In `index.ts`:
     ```typescript
     import { program } from 'commander';
     import { generateProof, formatTxtRecord } from './proof';
     import { verifyProof } from './verify';

     program
       .command('generate')
       .argument('<domain>', 'Domain name')
       .argument('<privateKey>', 'Wallet private key')
       .action(async (domain, privateKey) => {
         const proof = await generateProof(domain, privateKey);
         console.log('TXT Record:', formatTxtRecord(proof));
         console.log('Add to DNS at: aqua._<lookup key>.${domain}');
       });

     program
       .command('verify')
       .argument('<domain>', 'Domain name')
       .argument('<lookupKey>', 'Lookup key')
       .action(async (domain, lookupKey) => {
         const valid = await verifyProof(domain, lookupKey);
         console.log(valid ? 'Valid association' : 'Invalid or no association');
       });

     program.parse();
     ```
   - Commands: `node dist/index.js generate <domain> <privateKey>`, `node dist/index.js verify <domain> <lookupKey>`.

6. **Package and Test**:
   - Create esbuild script (`build.js`):
     ```javascript
     require('esbuild').build({
       entryPoints: ['src/index.ts'],
       bundle: true,
       platform: 'node',
       outfile: 'dist/wallet-tool.js',
       minify: true
     });
     ```
   - Run: `node build.js`.
   - Test commands:
     - Generate: `node dist/wallet-tool.js generate example.com 0x...`.
     - Verify: `node dist/wallet-tool.js verify example.com wallet1`.
   - Test on Windows, macOS, Linux.

7. **Document and Release**:
   - Write `docs/guide.md`:
     ```
     # Wallet Tool Guide
     1. Install Node.js (v18+).
     2. Download wallet-tool.js from GitHub.
     3. Generate proof: `node wallet-tool.js generate example.com <privateKey>`.
     4. Copy TXT record to DNS provider at `aqua._<lookupKey>.example.com`.
     5. Verify: `node wallet-tool.js verify example.com <lookupKey>`.
     Note: DNS updates may take 1-24 hours.
     ```
   - Release on GitHub with binaries and source.

## Best Practices
- **OWASP**: Validate inputs, avoid eval.
- **SOLID**: Modular proof and verify functions.
- **Extensibility**: Easy to add new signature schemes.

## Conclusion
The Wallet-to-Domain Lookup System delivers a secure, local TypeScript CLI tool for generating and verifying wallet-to-domain associations. Users with DNS admin rights can integrate proofs into TXT records at `aqua._<lookup key>.<domain>`. The implementation plan ensures a robust, portable solution with minimal dependencies. 
